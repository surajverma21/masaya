<?php

// autoload_real.php @generated by Composer

<<<<<<< HEAD

class ComposerAutoloaderInit7593662f0882c659badc9d7db2b7e97d
=======
class ComposerAutoloaderInit3cbc3588c64d581d348a69bd3b526435
>>>>>>> 10f7ab31aea5f4bb9a707e68b0364acbf3c6d3ea
{
    private static $loader;

    public static function loadClassLoader($class)
    {
        if ('Composer\Autoload\ClassLoader' === $class) {
            require __DIR__ . '/ClassLoader.php';
        }
    }

    public static function getLoader()
    {
        if (null !== self::$loader) {
            return self::$loader;
        }

<<<<<<< HEAD

        spl_autoload_register(array('ComposerAutoloaderInit7593662f0882c659badc9d7db2b7e97d', 'loadClassLoader'), true, true);
        self::$loader = $loader = new \Composer\Autoload\ClassLoader();
        spl_autoload_unregister(array('ComposerAutoloaderInit7593662f0882c659badc9d7db2b7e97d', 'loadClassLoader'));

=======
        spl_autoload_register(array('ComposerAutoloaderInit3cbc3588c64d581d348a69bd3b526435', 'loadClassLoader'), true, true);
        self::$loader = $loader = new \Composer\Autoload\ClassLoader();
        spl_autoload_unregister(array('ComposerAutoloaderInit3cbc3588c64d581d348a69bd3b526435', 'loadClassLoader'));
>>>>>>> 10f7ab31aea5f4bb9a707e68b0364acbf3c6d3ea

        $includePaths = require __DIR__ . '/include_paths.php';
        array_push($includePaths, get_include_path());
        set_include_path(join(PATH_SEPARATOR, $includePaths));

        $map = require __DIR__ . '/autoload_namespaces.php';
        foreach ($map as $namespace => $path) {
            $loader->set($namespace, $path);
        }

        $map = require __DIR__ . '/autoload_psr4.php';
        foreach ($map as $namespace => $path) {
            $loader->setPsr4($namespace, $path);
        }

        $classMap = require __DIR__ . '/autoload_classmap.php';
        if ($classMap) {
            $loader->addClassMap($classMap);
        }

        $loader->register(true);

        $includeFiles = require __DIR__ . '/autoload_files.php';
        foreach ($includeFiles as $file) {
<<<<<<< HEAD

            composerRequire7593662f0882c659badc9d7db2b7e97d($file);

=======
            composerRequire3cbc3588c64d581d348a69bd3b526435($file);
>>>>>>> 10f7ab31aea5f4bb9a707e68b0364acbf3c6d3ea
        }

        return $loader;
    }
}

<<<<<<< HEAD

function composerRequire7593662f0882c659badc9d7db2b7e97d($file)
=======
function composerRequire3cbc3588c64d581d348a69bd3b526435($file)
>>>>>>> 10f7ab31aea5f4bb9a707e68b0364acbf3c6d3ea
{
    require $file;
}
